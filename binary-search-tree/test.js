const assert = require('node:assert');
const bst = require('./binary-search-tree');

const largeTestArray =
  '9563 9330 4651 8593 4419 1217 5637 5907 7515 6385 4101 930 2315 -760 6072 1057 7512 9248 1665 5239 2513 360 2892 -387 1545 -708 5078 4488 7871 3337 627 2033 3476 7506 5118 7204 6142 8961 2016 4761 8424 5948 5700 -3 6830 4367 5350 5211 8079 -76 5290 4450 -802 6325 4669 8417 5284 1095 2029 455 1434 5952 9375 6723 1916 5384 991 6016 5786 9621 4862 6903 9513 149 7873 674 4501 8356 7568 1643 -28 9184 6316 6526 5265 5876 9632 1288 -58 2082 6565 3095 4398 2872 6626 2752 6411 3474 -711 -526 5711 3975 -957 1530 7029 3405 1637 4763 832 6806 -423 7629 3179 -87 8138 7730 74 4188 7037 5994 8855 5733 -946 1855 957 8031 2595 -93 9850 7474 2867 1576 6027 -920 4058 3466 8811 9753 2369 1575 9770 6147 -604 3034 5305 5326 4424 9512 7366 5861 9251 7641 2233 2820 9588 2227 4164 2234 5852 6265 587 8765 396 4632 -889 1473 1106 2849 2823 4632 6673 4065 349 4349 2214 8477 9758 2026 3902 7315 492 3981 8085 8588 8514 4823 1566 2273 602 6683 5610 8474 9733 4255 9782 2923 6811 4295 1894 5910 7162 5315 8272 1195 967 7985 8511 1188 222 7908 4515 5147 4574 9701 7709 -741 -730 9877 3830 6739 750 3040 5282 4993 9293 5884 8649 8250 1162 8382 -165 545 9007 3654 2914 45 1112 178 2755 2125 9256 1010 8227 5376 3829 4006 2075 7689 5704 3793 542 8280 8454 9141 6358 5134 7680 6210 2402 4646 2483 8421 7042 6691 368 6551 -893 1788 4677 9926 5273 6634 1332 7456 6720 -372 6611 4262 1268 1834 1631 4855 3544 443 8220 5966 3561 2510 -44 4081 2942 9344 1786 1800 2196 7925 9213 82 4119 5980 801 -280 8330 5437 9850 7445 9030 -728 -382 2131 30 -44 7395 5788 1823 9902 2034 -754 4096 5930 1881 6873 1243 -443 5405 8702 2308 458 3132 8860 -448 -437 7075 9164 9489 8724 7863 8795 9270 8347 5439 3113 1551 3915 4986 2391 1043 5431 -840 4731 2874 957 6884 6692 9913 7062 7538 5596 4635 8617 254 8412 3389 9368 5287 5431 5972 8931 1389 6195 5553 7137 6080 7300 7350 5639 4208 5417 7748 -723 8757 1564 7161 6360 734 -246 9849 9552 3531 9346 8107 8367 2796 6304 6723 7201 2133 3870 4798 3623 3938 6184 3385 -68 2600 1736 911 11 1665 824 1267 9726 6742 7636 8946 5782 7976 5836 6732 1753 -548 8062 8073 5287 3033 9780 247 6003 922 2782 2307 972 9020 8786 978 538 7963 8046 9172 5333 7251 3779 8360 9749 8037 155 839 -171 9714 6968 1485 2458 6514 3438 1788 7048 5320 3034 1945 755 450 -466 5323 8127 5670 7607 900 353 -508 9669 2499 1448 8220 9419 2411 249 7400 -929 8668 9349 5484 -322 3819 4819 4737 8866 8149 8859 4659 6842 6389 8126 -124 -307 4072 6238 6748 95 -890 5792 8217 4932 3886 1754 2409 4059 632 7249 2079 -990 1058 9765 1064 6050 8908 4376 -854 9565 8229 9566 9097 9127 5515 8835 9918 3312 3852 5730 8578 6756 9046 8768 607 1056 2811 1739 8934 9488 8400 6072 4832 1873 7896 1104 6281 6136 -225 9905 -886 -499 3010 8073 1256 6805 9740 9732 8034 7522 2210 9851 9389 2266 8937 3713 6001 9041 2144 -176 852 2009 4139 1724 5843 5114 8729 2399 6570 1770 2761 9541 3404 7774 932 -475 3002 -240 8835 5753 5550 1073 7144 5340 7375 5312 9869 8485 2480 1538 -889 6664 9198 2806 3884 323 1277 4002 8813 8354 2862 8020 7214 -330 7701 2083 6933 2339 4466 35 4675 9538 8272 338 7600 2993 6821 8201 2254 1039 634 3179 14 2503 9212 2955 2624 1952 2377 5753 9577 5286 900 8397 -835 3845 2584 8758 3140 7023 2324 1624 3060 8095 3034 2861 5457 7087 5127 3231 3375 5655 518 3133 7369 4671 4839 9504 5126 1200 8293 -760 5913 7553 16 4078 4963 3877 9980 3177 3613 928 3693 8417 515 6035 3870 9165 6017 7083 4489 8600 742 2265 7648 8678 4882 2909 2440 8293 8762 7235 1020 498 5293 -498 4034 2894 6686 3916 -851 4704 7406 206 3015 3443 9269 2813 5886 4409 9645 3955 6705 5226 4932 1527 8197 2345 100 776 9482 3385 3131 3621 7112 870 7010 6591 852 -219 5692 3483 5362 9284 7273 3687 5561 4714 4970 8901 9928 5838 8324 1956 8795 6124 1863 6554 6295 7600 2632 7627 5509 9379 7848 1658 2324 3782 1334 19 933 9207 4146 563 8467 -800 3881 857 -906 7147 454 2590 4361 3 7532 6001 5469 8223 2160 2988 232 6017 9800 9917 2120 5648 6226 787 -253 9001 178 9179 6045 3840 4197 5394 8190 1994 998 85 4346 -170 8021 7022 515 5190 7063 7063 2559 9139 8834 1742 7733 9019 7544 1787 458 8515 9007 8696 5648 2156 8863 2493 115 777 -274 5175 1210 895 7071 2237 8150 9715 6623 9523 5617 4987 5246 4376 8574 1261 5092 205 2774 410 2701 3598 4142 9617 5534 9404 3960 8497 4627 4423 5163 3634 641 6714 5855 8651 27 7911 3177 5684 8748 3489 6553 423 -683 1474 -631 3429 172 7181 -39 9951 4088 2691 7075 9539 5939 7552 3281 3344 -659 2669 8545 9097 8171 2078 2167 5841 9257 7266 9641 5704 515 4173 197 3483 3019 433 5753 9559 60 1068 2186 3451 5052 6592 -236 -170 1244 4512 1409 8673 6574 2716 6806 1554 2294 5741 3940 4637 8629 -895 9377 8916 499 8948 7054 1749 296 836 9166 5645 6985 9935 9687 5834 1895 9940 8473 8547 8550 5542 9155 3131 9192 1190 8337 6497 8717 -255 -736 8755 3012 -821 378 7472 4228 -268 9091 3202 8830 5716 7350 2734 5027 -144 9920 1413 6829 -552 6642 -464 338 5387 7982 9519 2913 7613 978 -999 8190 2778 9832 4952 8084 235'
    .split(' ')
    .map((c) => +c);

const testArrays = [[1, 2, 3, 4, 5], [2, -1, 1000, 2000, 5], largeTestArray];

const _sort = (arr) => {
  const _arr = [...arr];
  _arr.sort((a, b) => a - b);
  return _arr;
};

testArrays.forEach((arr) => {
  assert.deepEqual(bst.sort(arr), _sort(arr));
});

